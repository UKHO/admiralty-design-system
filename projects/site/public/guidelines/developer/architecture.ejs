<h1 id="architecture">Architecture</h1>
<p>Angular applications are built from a number of basic building blocks. The framework follows the MVVM (model-view-viewmodel) approach.</p>
<h2 id="modules">Modules</h2>
<p>At their core, applications are defined by a number of NgModules. These are not to be confused with ES2015 modules (aka, every Javascript/TypeScript file). NgModules provide a context for associated components along with mechanisms such as dependency injection.</p>
<p>The Angular documentation provides more information on NgModules.</p>
<p><a href="https://angular.io/guide/architecture-modules">https://angular.io/guide/architecture-modules</a></p>
<pre><code class="lang-bash"><div class="highlight"><pre>ng generate module &lt;name&gt;
</pre></div>

</code></pre>
<h2 id="components-and-containers">Components and containers</h2>
<p>To provide the presentation layer, components are used. Angular itself has a concept of components. However, it is preferable to make a distinction between components and containers.</p>
<h3 id="containers">Containers</h3>
<p>Containers are the routeable &quot;pages&quot; of the SPA. They orchestrate injection of services to the view layer. This allows data to flow from the model to the view, and events to flow up from the view to the model.</p>
<p><a href="https://blog.angulartraining.com/component-architecture-with-angular-6f7bc9165443">https://blog.angulartraining.com/component-architecture-with-angular-6f7bc9165443</a></p>
<pre><code class="lang-bash"><div class="highlight"><pre>ng generate component containers/&lt;name&gt;
</pre></div>

</code></pre>
<h3 id="components">Components</h3>
<p>Components are the &quot;dumb&quot; part of the presentational layer. Components should not inject services, nor have any awareness of the wider application. They have only inputs and outputs.</p>
<p><a href="https://angular.io/guide/architecture-components">https://angular.io/guide/architecture-components</a></p>
<pre><code class="lang-bash"><div class="highlight"><pre>ng generate component components/&lt;name&gt;
</pre></div>

</code></pre>
<h2 id="services">Services</h2>
<p>Services provide non-view-related logic to containers and other services. They can be injected via dependency injection and are therefore singleton default. </p>
<p><a href="https://angular.io/guide/architecture-services">https://angular.io/guide/architecture-services</a></p>
<pre><code class="lang-bash"><div class="highlight"><pre>ng generate service services/&lt;name&gt;
</pre></div>

</code></pre>
