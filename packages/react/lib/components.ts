'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import { type AdmiraltyAutocompleteCustomEvent, type AdmiraltyCheckboxCustomEvent, type AdmiraltyFileInputCustomEvent, type AdmiraltyInputCustomEvent, type AdmiraltyRadioGroupCustomEvent, type AdmiraltySelectCustomEvent, type AdmiraltyTextareaCustomEvent, type AutoCompleteChangeEventDetail, type CheckboxChangeEventDetail, type FileInputChangeEventDetail, type InputChangeEventDetail, type RadioGroupChangeEventDetail, type SelectChangeEventDetail, type TextAreaChangeEventDetail } from "@ukho/admiralty-core";
import { AdmiraltyAutocompleteOption as AdmiraltyAutocompleteOptionElement, defineCustomElement as defineAdmiraltyAutocompleteOption } from "@ukho/admiralty-core/dist/components/admiralty-autocomplete-option.js";
import { AdmiraltyAutocomplete as AdmiraltyAutocompleteElement, defineCustomElement as defineAdmiraltyAutocomplete } from "@ukho/admiralty-core/dist/components/admiralty-autocomplete.js";
import { AdmiraltyBreadcrumb as AdmiraltyBreadcrumbElement, defineCustomElement as defineAdmiraltyBreadcrumb } from "@ukho/admiralty-core/dist/components/admiralty-breadcrumb.js";
import { AdmiraltyBreadcrumbs as AdmiraltyBreadcrumbsElement, defineCustomElement as defineAdmiraltyBreadcrumbs } from "@ukho/admiralty-core/dist/components/admiralty-breadcrumbs.js";
import { AdmiraltyButton as AdmiraltyButtonElement, defineCustomElement as defineAdmiraltyButton } from "@ukho/admiralty-core/dist/components/admiralty-button.js";
import { AdmiraltyCard as AdmiraltyCardElement, defineCustomElement as defineAdmiraltyCard } from "@ukho/admiralty-core/dist/components/admiralty-card.js";
import { AdmiraltyCheckbox as AdmiraltyCheckboxElement, defineCustomElement as defineAdmiraltyCheckbox } from "@ukho/admiralty-core/dist/components/admiralty-checkbox.js";
import { AdmiraltyColourBlock as AdmiraltyColourBlockElement, defineCustomElement as defineAdmiraltyColourBlock } from "@ukho/admiralty-core/dist/components/admiralty-colour-block.js";
import { AdmiraltyDialogue as AdmiraltyDialogueElement, defineCustomElement as defineAdmiraltyDialogue } from "@ukho/admiralty-core/dist/components/admiralty-dialogue.js";
import { AdmiraltyErrorSummary as AdmiraltyErrorSummaryElement, defineCustomElement as defineAdmiraltyErrorSummary } from "@ukho/admiralty-core/dist/components/admiralty-error-summary.js";
import { AdmiraltyExpansion as AdmiraltyExpansionElement, defineCustomElement as defineAdmiraltyExpansion } from "@ukho/admiralty-core/dist/components/admiralty-expansion.js";
import { AdmiraltyFileInput as AdmiraltyFileInputElement, defineCustomElement as defineAdmiraltyFileInput } from "@ukho/admiralty-core/dist/components/admiralty-file-input.js";
import { AdmiraltyFilterGroup as AdmiraltyFilterGroupElement, defineCustomElement as defineAdmiraltyFilterGroup } from "@ukho/admiralty-core/dist/components/admiralty-filter-group.js";
import { AdmiraltyFilter as AdmiraltyFilterElement, defineCustomElement as defineAdmiraltyFilter } from "@ukho/admiralty-core/dist/components/admiralty-filter.js";
import { AdmiraltyFooter as AdmiraltyFooterElement, defineCustomElement as defineAdmiraltyFooter } from "@ukho/admiralty-core/dist/components/admiralty-footer.js";
import { AdmiraltyHeaderMenuItem as AdmiraltyHeaderMenuItemElement, defineCustomElement as defineAdmiraltyHeaderMenuItem } from "@ukho/admiralty-core/dist/components/admiralty-header-menu-item.js";
import { AdmiraltyHeaderMenuLink as AdmiraltyHeaderMenuLinkElement, defineCustomElement as defineAdmiraltyHeaderMenuLink } from "@ukho/admiralty-core/dist/components/admiralty-header-menu-link.js";
import { AdmiraltyHeaderProfile as AdmiraltyHeaderProfileElement, defineCustomElement as defineAdmiraltyHeaderProfile } from "@ukho/admiralty-core/dist/components/admiralty-header-profile.js";
import { AdmiraltyHeaderSubMenuItem as AdmiraltyHeaderSubMenuItemElement, defineCustomElement as defineAdmiraltyHeaderSubMenuItem } from "@ukho/admiralty-core/dist/components/admiralty-header-sub-menu-item.js";
import { AdmiraltyHeader as AdmiraltyHeaderElement, defineCustomElement as defineAdmiraltyHeader } from "@ukho/admiralty-core/dist/components/admiralty-header.js";
import { AdmiraltyHint as AdmiraltyHintElement, defineCustomElement as defineAdmiraltyHint } from "@ukho/admiralty-core/dist/components/admiralty-hint.js";
import { AdmiraltyHr as AdmiraltyHrElement, defineCustomElement as defineAdmiraltyHr } from "@ukho/admiralty-core/dist/components/admiralty-hr.js";
import { AdmiraltyIconSideBarItem as AdmiraltyIconSideBarItemElement, defineCustomElement as defineAdmiraltyIconSideBarItem } from "@ukho/admiralty-core/dist/components/admiralty-icon-side-bar-item.js";
import { AdmiraltyIconSideBar as AdmiraltyIconSideBarElement, defineCustomElement as defineAdmiraltyIconSideBar } from "@ukho/admiralty-core/dist/components/admiralty-icon-side-bar.js";
import { AdmiraltyIcon as AdmiraltyIconElement, defineCustomElement as defineAdmiraltyIcon } from "@ukho/admiralty-core/dist/components/admiralty-icon.js";
import { AdmiraltyInputInvalid as AdmiraltyInputInvalidElement, defineCustomElement as defineAdmiraltyInputInvalid } from "@ukho/admiralty-core/dist/components/admiralty-input-invalid.js";
import { AdmiraltyInput as AdmiraltyInputElement, defineCustomElement as defineAdmiraltyInput } from "@ukho/admiralty-core/dist/components/admiralty-input.js";
import { AdmiraltyLabel as AdmiraltyLabelElement, defineCustomElement as defineAdmiraltyLabel } from "@ukho/admiralty-core/dist/components/admiralty-label.js";
import { AdmiraltyLink as AdmiraltyLinkElement, defineCustomElement as defineAdmiraltyLink } from "@ukho/admiralty-core/dist/components/admiralty-link.js";
import { AdmiraltyModalDialog as AdmiraltyModalDialogElement, defineCustomElement as defineAdmiraltyModalDialog } from "@ukho/admiralty-core/dist/components/admiralty-modal-dialog.js";
import { AdmiraltyPaginator as AdmiraltyPaginatorElement, defineCustomElement as defineAdmiraltyPaginator } from "@ukho/admiralty-core/dist/components/admiralty-paginator.js";
import { AdmiraltyPhaseBanner as AdmiraltyPhaseBannerElement, defineCustomElement as defineAdmiraltyPhaseBanner } from "@ukho/admiralty-core/dist/components/admiralty-phase-banner.js";
import { AdmiraltyPill as AdmiraltyPillElement, defineCustomElement as defineAdmiraltyPill } from "@ukho/admiralty-core/dist/components/admiralty-pill.js";
import { AdmiraltyProgressBar as AdmiraltyProgressBarElement, defineCustomElement as defineAdmiraltyProgressBar } from "@ukho/admiralty-core/dist/components/admiralty-progress-bar.js";
import { AdmiraltyRadioGroup as AdmiraltyRadioGroupElement, defineCustomElement as defineAdmiraltyRadioGroup } from "@ukho/admiralty-core/dist/components/admiralty-radio-group.js";
import { AdmiraltyRadio as AdmiraltyRadioElement, defineCustomElement as defineAdmiraltyRadio } from "@ukho/admiralty-core/dist/components/admiralty-radio.js";
import { AdmiraltyReadMore as AdmiraltyReadMoreElement, defineCustomElement as defineAdmiraltyReadMore } from "@ukho/admiralty-core/dist/components/admiralty-read-more.js";
import { AdmiraltySelect as AdmiraltySelectElement, defineCustomElement as defineAdmiraltySelect } from "@ukho/admiralty-core/dist/components/admiralty-select.js";
import { AdmiraltySideBarItem as AdmiraltySideBarItemElement, defineCustomElement as defineAdmiraltySideBarItem } from "@ukho/admiralty-core/dist/components/admiralty-side-bar-item.js";
import { AdmiraltySideBar as AdmiraltySideBarElement, defineCustomElement as defineAdmiraltySideBar } from "@ukho/admiralty-core/dist/components/admiralty-side-bar.js";
import { AdmiraltySideNavItem as AdmiraltySideNavItemElement, defineCustomElement as defineAdmiraltySideNavItem } from "@ukho/admiralty-core/dist/components/admiralty-side-nav-item.js";
import { AdmiraltySideNav as AdmiraltySideNavElement, defineCustomElement as defineAdmiraltySideNav } from "@ukho/admiralty-core/dist/components/admiralty-side-nav.js";
import { AdmiraltySkipLink as AdmiraltySkipLinkElement, defineCustomElement as defineAdmiraltySkipLink } from "@ukho/admiralty-core/dist/components/admiralty-skip-link.js";
import { AdmiraltyTabGroup as AdmiraltyTabGroupElement, defineCustomElement as defineAdmiraltyTabGroup } from "@ukho/admiralty-core/dist/components/admiralty-tab-group.js";
import { AdmiraltyTab as AdmiraltyTabElement, defineCustomElement as defineAdmiraltyTab } from "@ukho/admiralty-core/dist/components/admiralty-tab.js";
import { AdmiraltyTableBody as AdmiraltyTableBodyElement, defineCustomElement as defineAdmiraltyTableBody } from "@ukho/admiralty-core/dist/components/admiralty-table-body.js";
import { AdmiraltyTableCell as AdmiraltyTableCellElement, defineCustomElement as defineAdmiraltyTableCell } from "@ukho/admiralty-core/dist/components/admiralty-table-cell.js";
import { AdmiraltyTableHeaderCell as AdmiraltyTableHeaderCellElement, defineCustomElement as defineAdmiraltyTableHeaderCell } from "@ukho/admiralty-core/dist/components/admiralty-table-header-cell.js";
import { AdmiraltyTableHeader as AdmiraltyTableHeaderElement, defineCustomElement as defineAdmiraltyTableHeader } from "@ukho/admiralty-core/dist/components/admiralty-table-header.js";
import { AdmiraltyTableRow as AdmiraltyTableRowElement, defineCustomElement as defineAdmiraltyTableRow } from "@ukho/admiralty-core/dist/components/admiralty-table-row.js";
import { AdmiraltyTable as AdmiraltyTableElement, defineCustomElement as defineAdmiraltyTable } from "@ukho/admiralty-core/dist/components/admiralty-table.js";
import { AdmiraltyTextSideBarItem as AdmiraltyTextSideBarItemElement, defineCustomElement as defineAdmiraltyTextSideBarItem } from "@ukho/admiralty-core/dist/components/admiralty-text-side-bar-item.js";
import { AdmiraltyTextarea as AdmiraltyTextareaElement, defineCustomElement as defineAdmiraltyTextarea } from "@ukho/admiralty-core/dist/components/admiralty-textarea.js";
import React from 'react';

type AdmiraltyAutocompleteEvents = { onAdmiraltyChange: EventName<AdmiraltyAutocompleteCustomEvent<AutoCompleteChangeEventDetail>> };

export const AdmiraltyAutocomplete: StencilReactComponent<AdmiraltyAutocompleteElement, AdmiraltyAutocompleteEvents> = /*@__PURE__*/ createComponent<AdmiraltyAutocompleteElement, AdmiraltyAutocompleteEvents>({
    tagName: 'admiralty-autocomplete',
    elementClass: AdmiraltyAutocompleteElement,
    react: React,
    events: { onAdmiraltyChange: 'admiraltyChange' } as AdmiraltyAutocompleteEvents,
    defineCustomElement: defineAdmiraltyAutocomplete
});

type AdmiraltyAutocompleteOptionEvents = NonNullable<unknown>;

export const AdmiraltyAutocompleteOption: StencilReactComponent<AdmiraltyAutocompleteOptionElement, AdmiraltyAutocompleteOptionEvents> = /*@__PURE__*/ createComponent<AdmiraltyAutocompleteOptionElement, AdmiraltyAutocompleteOptionEvents>({
    tagName: 'admiralty-autocomplete-option',
    elementClass: AdmiraltyAutocompleteOptionElement,
    react: React,
    events: {} as AdmiraltyAutocompleteOptionEvents,
    defineCustomElement: defineAdmiraltyAutocompleteOption
});

type AdmiraltyBreadcrumbEvents = NonNullable<unknown>;

export const AdmiraltyBreadcrumb: StencilReactComponent<AdmiraltyBreadcrumbElement, AdmiraltyBreadcrumbEvents> = /*@__PURE__*/ createComponent<AdmiraltyBreadcrumbElement, AdmiraltyBreadcrumbEvents>({
    tagName: 'admiralty-breadcrumb',
    elementClass: AdmiraltyBreadcrumbElement,
    react: React,
    events: {} as AdmiraltyBreadcrumbEvents,
    defineCustomElement: defineAdmiraltyBreadcrumb
});

type AdmiraltyBreadcrumbsEvents = NonNullable<unknown>;

export const AdmiraltyBreadcrumbs: StencilReactComponent<AdmiraltyBreadcrumbsElement, AdmiraltyBreadcrumbsEvents> = /*@__PURE__*/ createComponent<AdmiraltyBreadcrumbsElement, AdmiraltyBreadcrumbsEvents>({
    tagName: 'admiralty-breadcrumbs',
    elementClass: AdmiraltyBreadcrumbsElement,
    react: React,
    events: {} as AdmiraltyBreadcrumbsEvents,
    defineCustomElement: defineAdmiraltyBreadcrumbs
});

type AdmiraltyButtonEvents = NonNullable<unknown>;

export const AdmiraltyButton: StencilReactComponent<AdmiraltyButtonElement, AdmiraltyButtonEvents> = /*@__PURE__*/ createComponent<AdmiraltyButtonElement, AdmiraltyButtonEvents>({
    tagName: 'admiralty-button',
    elementClass: AdmiraltyButtonElement,
    react: React,
    events: {} as AdmiraltyButtonEvents,
    defineCustomElement: defineAdmiraltyButton
});

type AdmiraltyCardEvents = NonNullable<unknown>;

export const AdmiraltyCard: StencilReactComponent<AdmiraltyCardElement, AdmiraltyCardEvents> = /*@__PURE__*/ createComponent<AdmiraltyCardElement, AdmiraltyCardEvents>({
    tagName: 'admiralty-card',
    elementClass: AdmiraltyCardElement,
    react: React,
    events: {} as AdmiraltyCardEvents,
    defineCustomElement: defineAdmiraltyCard
});

type AdmiraltyCheckboxEvents = {
    onAdmiraltyChange: EventName<AdmiraltyCheckboxCustomEvent<CheckboxChangeEventDetail>>,
    onCheckboxFocus: EventName<AdmiraltyCheckboxCustomEvent<FocusEvent>>,
    onCheckboxBlur: EventName<AdmiraltyCheckboxCustomEvent<FocusEvent>>
};

export const AdmiraltyCheckbox: StencilReactComponent<AdmiraltyCheckboxElement, AdmiraltyCheckboxEvents> = /*@__PURE__*/ createComponent<AdmiraltyCheckboxElement, AdmiraltyCheckboxEvents>({
    tagName: 'admiralty-checkbox',
    elementClass: AdmiraltyCheckboxElement,
    react: React,
    events: {
        onAdmiraltyChange: 'admiraltyChange',
        onCheckboxFocus: 'checkboxFocus',
        onCheckboxBlur: 'checkboxBlur'
    } as AdmiraltyCheckboxEvents,
    defineCustomElement: defineAdmiraltyCheckbox
});

type AdmiraltyColourBlockEvents = { onColourBlockLinkClicked: EventName<CustomEvent<string>> };

export const AdmiraltyColourBlock: StencilReactComponent<AdmiraltyColourBlockElement, AdmiraltyColourBlockEvents> = /*@__PURE__*/ createComponent<AdmiraltyColourBlockElement, AdmiraltyColourBlockEvents>({
    tagName: 'admiralty-colour-block',
    elementClass: AdmiraltyColourBlockElement,
    react: React,
    events: { onColourBlockLinkClicked: 'colourBlockLinkClicked' } as AdmiraltyColourBlockEvents,
    defineCustomElement: defineAdmiraltyColourBlock
});

type AdmiraltyDialogueEvents = NonNullable<unknown>;

export const AdmiraltyDialogue: StencilReactComponent<AdmiraltyDialogueElement, AdmiraltyDialogueEvents> = /*@__PURE__*/ createComponent<AdmiraltyDialogueElement, AdmiraltyDialogueEvents>({
    tagName: 'admiralty-dialogue',
    elementClass: AdmiraltyDialogueElement,
    react: React,
    events: {} as AdmiraltyDialogueEvents,
    defineCustomElement: defineAdmiraltyDialogue
});

type AdmiraltyErrorSummaryEvents = NonNullable<unknown>;

export const AdmiraltyErrorSummary: StencilReactComponent<AdmiraltyErrorSummaryElement, AdmiraltyErrorSummaryEvents> = /*@__PURE__*/ createComponent<AdmiraltyErrorSummaryElement, AdmiraltyErrorSummaryEvents>({
    tagName: 'admiralty-error-summary',
    elementClass: AdmiraltyErrorSummaryElement,
    react: React,
    events: {} as AdmiraltyErrorSummaryEvents,
    defineCustomElement: defineAdmiraltyErrorSummary
});

type AdmiraltyExpansionEvents = { onToggled: EventName<CustomEvent<boolean>> };

export const AdmiraltyExpansion: StencilReactComponent<AdmiraltyExpansionElement, AdmiraltyExpansionEvents> = /*@__PURE__*/ createComponent<AdmiraltyExpansionElement, AdmiraltyExpansionEvents>({
    tagName: 'admiralty-expansion',
    elementClass: AdmiraltyExpansionElement,
    react: React,
    events: { onToggled: 'toggled' } as AdmiraltyExpansionEvents,
    defineCustomElement: defineAdmiraltyExpansion
});

type AdmiraltyFileInputEvents = { onFileInputChange: EventName<AdmiraltyFileInputCustomEvent<FileInputChangeEventDetail>> };

export const AdmiraltyFileInput: StencilReactComponent<AdmiraltyFileInputElement, AdmiraltyFileInputEvents> = /*@__PURE__*/ createComponent<AdmiraltyFileInputElement, AdmiraltyFileInputEvents>({
    tagName: 'admiralty-file-input',
    elementClass: AdmiraltyFileInputElement,
    react: React,
    events: { onFileInputChange: 'fileInputChange' } as AdmiraltyFileInputEvents,
    defineCustomElement: defineAdmiraltyFileInput
});

type AdmiraltyFilterEvents = {
    onFilterCleared: EventName<CustomEvent<void>>,
    onFilterApplied: EventName<CustomEvent<void>>
};

export const AdmiraltyFilter: StencilReactComponent<AdmiraltyFilterElement, AdmiraltyFilterEvents> = /*@__PURE__*/ createComponent<AdmiraltyFilterElement, AdmiraltyFilterEvents>({
    tagName: 'admiralty-filter',
    elementClass: AdmiraltyFilterElement,
    react: React,
    events: {
        onFilterCleared: 'filterCleared',
        onFilterApplied: 'filterApplied'
    } as AdmiraltyFilterEvents,
    defineCustomElement: defineAdmiraltyFilter
});

type AdmiraltyFilterGroupEvents = NonNullable<unknown>;

export const AdmiraltyFilterGroup: StencilReactComponent<AdmiraltyFilterGroupElement, AdmiraltyFilterGroupEvents> = /*@__PURE__*/ createComponent<AdmiraltyFilterGroupElement, AdmiraltyFilterGroupEvents>({
    tagName: 'admiralty-filter-group',
    elementClass: AdmiraltyFilterGroupElement,
    react: React,
    events: {} as AdmiraltyFilterGroupEvents,
    defineCustomElement: defineAdmiraltyFilterGroup
});

type AdmiraltyFooterEvents = NonNullable<unknown>;

export const AdmiraltyFooter: StencilReactComponent<AdmiraltyFooterElement, AdmiraltyFooterEvents> = /*@__PURE__*/ createComponent<AdmiraltyFooterElement, AdmiraltyFooterEvents>({
    tagName: 'admiralty-footer',
    elementClass: AdmiraltyFooterElement,
    react: React,
    events: {} as AdmiraltyFooterEvents,
    defineCustomElement: defineAdmiraltyFooter
});

type AdmiraltyHeaderEvents = { onTitledClicked: EventName<CustomEvent<string>> };

export const AdmiraltyHeader: StencilReactComponent<AdmiraltyHeaderElement, AdmiraltyHeaderEvents> = /*@__PURE__*/ createComponent<AdmiraltyHeaderElement, AdmiraltyHeaderEvents>({
    tagName: 'admiralty-header',
    elementClass: AdmiraltyHeaderElement,
    react: React,
    events: { onTitledClicked: 'titledClicked' } as AdmiraltyHeaderEvents,
    defineCustomElement: defineAdmiraltyHeader
});

type AdmiraltyHeaderMenuItemEvents = { onMenuItemClick: EventName<CustomEvent<void>> };

export const AdmiraltyHeaderMenuItem: StencilReactComponent<AdmiraltyHeaderMenuItemElement, AdmiraltyHeaderMenuItemEvents> = /*@__PURE__*/ createComponent<AdmiraltyHeaderMenuItemElement, AdmiraltyHeaderMenuItemEvents>({
    tagName: 'admiralty-header-menu-item',
    elementClass: AdmiraltyHeaderMenuItemElement,
    react: React,
    events: { onMenuItemClick: 'menuItemClick' } as AdmiraltyHeaderMenuItemEvents,
    defineCustomElement: defineAdmiraltyHeaderMenuItem
});

type AdmiraltyHeaderMenuLinkEvents = { onMenuItemClick: EventName<CustomEvent<void>> };

export const AdmiraltyHeaderMenuLink: StencilReactComponent<AdmiraltyHeaderMenuLinkElement, AdmiraltyHeaderMenuLinkEvents> = /*@__PURE__*/ createComponent<AdmiraltyHeaderMenuLinkElement, AdmiraltyHeaderMenuLinkEvents>({
    tagName: 'admiralty-header-menu-link',
    elementClass: AdmiraltyHeaderMenuLinkElement,
    react: React,
    events: { onMenuItemClick: 'menuItemClick' } as AdmiraltyHeaderMenuLinkEvents,
    defineCustomElement: defineAdmiraltyHeaderMenuLink
});

type AdmiraltyHeaderProfileEvents = {
    onSignInClicked: EventName<CustomEvent<void>>,
    onYourAccountClicked: EventName<CustomEvent<void>>,
    onSignOutClicked: EventName<CustomEvent<void>>
};

export const AdmiraltyHeaderProfile: StencilReactComponent<AdmiraltyHeaderProfileElement, AdmiraltyHeaderProfileEvents> = /*@__PURE__*/ createComponent<AdmiraltyHeaderProfileElement, AdmiraltyHeaderProfileEvents>({
    tagName: 'admiralty-header-profile',
    elementClass: AdmiraltyHeaderProfileElement,
    react: React,
    events: {
        onSignInClicked: 'signInClicked',
        onYourAccountClicked: 'yourAccountClicked',
        onSignOutClicked: 'signOutClicked'
    } as AdmiraltyHeaderProfileEvents,
    defineCustomElement: defineAdmiraltyHeaderProfile
});

type AdmiraltyHeaderSubMenuItemEvents = { onSubMenuItemClick: EventName<CustomEvent<string>> };

export const AdmiraltyHeaderSubMenuItem: StencilReactComponent<AdmiraltyHeaderSubMenuItemElement, AdmiraltyHeaderSubMenuItemEvents> = /*@__PURE__*/ createComponent<AdmiraltyHeaderSubMenuItemElement, AdmiraltyHeaderSubMenuItemEvents>({
    tagName: 'admiralty-header-sub-menu-item',
    elementClass: AdmiraltyHeaderSubMenuItemElement,
    react: React,
    events: { onSubMenuItemClick: 'subMenuItemClick' } as AdmiraltyHeaderSubMenuItemEvents,
    defineCustomElement: defineAdmiraltyHeaderSubMenuItem
});

type AdmiraltyHintEvents = NonNullable<unknown>;

export const AdmiraltyHint: StencilReactComponent<AdmiraltyHintElement, AdmiraltyHintEvents> = /*@__PURE__*/ createComponent<AdmiraltyHintElement, AdmiraltyHintEvents>({
    tagName: 'admiralty-hint',
    elementClass: AdmiraltyHintElement,
    react: React,
    events: {} as AdmiraltyHintEvents,
    defineCustomElement: defineAdmiraltyHint
});

type AdmiraltyHrEvents = NonNullable<unknown>;

export const AdmiraltyHr: StencilReactComponent<AdmiraltyHrElement, AdmiraltyHrEvents> = /*@__PURE__*/ createComponent<AdmiraltyHrElement, AdmiraltyHrEvents>({
    tagName: 'admiralty-hr',
    elementClass: AdmiraltyHrElement,
    react: React,
    events: {} as AdmiraltyHrEvents,
    defineCustomElement: defineAdmiraltyHr
});

type AdmiraltyIconEvents = NonNullable<unknown>;

export const AdmiraltyIcon: StencilReactComponent<AdmiraltyIconElement, AdmiraltyIconEvents> = /*@__PURE__*/ createComponent<AdmiraltyIconElement, AdmiraltyIconEvents>({
    tagName: 'admiralty-icon',
    elementClass: AdmiraltyIconElement,
    react: React,
    events: {} as AdmiraltyIconEvents,
    defineCustomElement: defineAdmiraltyIcon
});

type AdmiraltyIconSideBarEvents = NonNullable<unknown>;

export const AdmiraltyIconSideBar: StencilReactComponent<AdmiraltyIconSideBarElement, AdmiraltyIconSideBarEvents> = /*@__PURE__*/ createComponent<AdmiraltyIconSideBarElement, AdmiraltyIconSideBarEvents>({
    tagName: 'admiralty-icon-side-bar',
    elementClass: AdmiraltyIconSideBarElement,
    react: React,
    events: {} as AdmiraltyIconSideBarEvents,
    defineCustomElement: defineAdmiraltyIconSideBar
});

type AdmiraltyIconSideBarItemEvents = {
    onToggled: EventName<CustomEvent<boolean>>,
    onIconSideBarItemClick: EventName<CustomEvent<string>>
};

export const AdmiraltyIconSideBarItem: StencilReactComponent<AdmiraltyIconSideBarItemElement, AdmiraltyIconSideBarItemEvents> = /*@__PURE__*/ createComponent<AdmiraltyIconSideBarItemElement, AdmiraltyIconSideBarItemEvents>({
    tagName: 'admiralty-icon-side-bar-item',
    elementClass: AdmiraltyIconSideBarItemElement,
    react: React,
    events: {
        onToggled: 'toggled',
        onIconSideBarItemClick: 'iconSideBarItemClick'
    } as AdmiraltyIconSideBarItemEvents,
    defineCustomElement: defineAdmiraltyIconSideBarItem
});

type AdmiraltyInputEvents = {
    onAdmiraltyInput: EventName<AdmiraltyInputCustomEvent<InputChangeEventDetail>>,
    onAdmiraltyFocus: EventName<AdmiraltyInputCustomEvent<FocusEvent>>,
    onAdmiraltyBlur: EventName<AdmiraltyInputCustomEvent<FocusEvent>>
};

export const AdmiraltyInput: StencilReactComponent<AdmiraltyInputElement, AdmiraltyInputEvents> = /*@__PURE__*/ createComponent<AdmiraltyInputElement, AdmiraltyInputEvents>({
    tagName: 'admiralty-input',
    elementClass: AdmiraltyInputElement,
    react: React,
    events: {
        onAdmiraltyInput: 'admiraltyInput',
        onAdmiraltyFocus: 'admiraltyFocus',
        onAdmiraltyBlur: 'admiraltyBlur'
    } as AdmiraltyInputEvents,
    defineCustomElement: defineAdmiraltyInput
});

type AdmiraltyInputInvalidEvents = NonNullable<unknown>;

export const AdmiraltyInputInvalid: StencilReactComponent<AdmiraltyInputInvalidElement, AdmiraltyInputInvalidEvents> = /*@__PURE__*/ createComponent<AdmiraltyInputInvalidElement, AdmiraltyInputInvalidEvents>({
    tagName: 'admiralty-input-invalid',
    elementClass: AdmiraltyInputInvalidElement,
    react: React,
    events: {} as AdmiraltyInputInvalidEvents,
    defineCustomElement: defineAdmiraltyInputInvalid
});

type AdmiraltyLabelEvents = NonNullable<unknown>;

export const AdmiraltyLabel: StencilReactComponent<AdmiraltyLabelElement, AdmiraltyLabelEvents> = /*@__PURE__*/ createComponent<AdmiraltyLabelElement, AdmiraltyLabelEvents>({
    tagName: 'admiralty-label',
    elementClass: AdmiraltyLabelElement,
    react: React,
    events: {} as AdmiraltyLabelEvents,
    defineCustomElement: defineAdmiraltyLabel
});

type AdmiraltyLinkEvents = NonNullable<unknown>;

export const AdmiraltyLink: StencilReactComponent<AdmiraltyLinkElement, AdmiraltyLinkEvents> = /*@__PURE__*/ createComponent<AdmiraltyLinkElement, AdmiraltyLinkEvents>({
    tagName: 'admiralty-link',
    elementClass: AdmiraltyLinkElement,
    react: React,
    events: {} as AdmiraltyLinkEvents,
    defineCustomElement: defineAdmiraltyLink
});

type AdmiraltyModalDialogEvents = NonNullable<unknown>;

export const AdmiraltyModalDialog: StencilReactComponent<AdmiraltyModalDialogElement, AdmiraltyModalDialogEvents> = /*@__PURE__*/ createComponent<AdmiraltyModalDialogElement, AdmiraltyModalDialogEvents>({
    tagName: 'admiralty-modal-dialog',
    elementClass: AdmiraltyModalDialogElement,
    react: React,
    events: {} as AdmiraltyModalDialogEvents,
    defineCustomElement: defineAdmiraltyModalDialog
});

type AdmiraltyPaginatorEvents = { onPageChange: EventName<CustomEvent<number>> };

export const AdmiraltyPaginator: StencilReactComponent<AdmiraltyPaginatorElement, AdmiraltyPaginatorEvents> = /*@__PURE__*/ createComponent<AdmiraltyPaginatorElement, AdmiraltyPaginatorEvents>({
    tagName: 'admiralty-paginator',
    elementClass: AdmiraltyPaginatorElement,
    react: React,
    events: { onPageChange: 'pageChange' } as AdmiraltyPaginatorEvents,
    defineCustomElement: defineAdmiraltyPaginator
});

type AdmiraltyPhaseBannerEvents = NonNullable<unknown>;

export const AdmiraltyPhaseBanner: StencilReactComponent<AdmiraltyPhaseBannerElement, AdmiraltyPhaseBannerEvents> = /*@__PURE__*/ createComponent<AdmiraltyPhaseBannerElement, AdmiraltyPhaseBannerEvents>({
    tagName: 'admiralty-phase-banner',
    elementClass: AdmiraltyPhaseBannerElement,
    react: React,
    events: {} as AdmiraltyPhaseBannerEvents,
    defineCustomElement: defineAdmiraltyPhaseBanner
});

type AdmiraltyPillEvents = NonNullable<unknown>;

export const AdmiraltyPill: StencilReactComponent<AdmiraltyPillElement, AdmiraltyPillEvents> = /*@__PURE__*/ createComponent<AdmiraltyPillElement, AdmiraltyPillEvents>({
    tagName: 'admiralty-pill',
    elementClass: AdmiraltyPillElement,
    react: React,
    events: {} as AdmiraltyPillEvents,
    defineCustomElement: defineAdmiraltyPill
});

type AdmiraltyProgressBarEvents = NonNullable<unknown>;

export const AdmiraltyProgressBar: StencilReactComponent<AdmiraltyProgressBarElement, AdmiraltyProgressBarEvents> = /*@__PURE__*/ createComponent<AdmiraltyProgressBarElement, AdmiraltyProgressBarEvents>({
    tagName: 'admiralty-progress-bar',
    elementClass: AdmiraltyProgressBarElement,
    react: React,
    events: {} as AdmiraltyProgressBarEvents,
    defineCustomElement: defineAdmiraltyProgressBar
});

type AdmiraltyRadioEvents = {
    onAdmiraltyFocus: EventName<CustomEvent<void>>,
    onAdmiraltyBlur: EventName<CustomEvent<void>>,
    onAdmiraltyChange: EventName<CustomEvent<void>>
};

export const AdmiraltyRadio: StencilReactComponent<AdmiraltyRadioElement, AdmiraltyRadioEvents> = /*@__PURE__*/ createComponent<AdmiraltyRadioElement, AdmiraltyRadioEvents>({
    tagName: 'admiralty-radio',
    elementClass: AdmiraltyRadioElement,
    react: React,
    events: {
        onAdmiraltyFocus: 'admiraltyFocus',
        onAdmiraltyBlur: 'admiraltyBlur',
        onAdmiraltyChange: 'admiraltyChange'
    } as AdmiraltyRadioEvents,
    defineCustomElement: defineAdmiraltyRadio
});

type AdmiraltyRadioGroupEvents = { onAdmiraltyChange: EventName<AdmiraltyRadioGroupCustomEvent<RadioGroupChangeEventDetail>> };

export const AdmiraltyRadioGroup: StencilReactComponent<AdmiraltyRadioGroupElement, AdmiraltyRadioGroupEvents> = /*@__PURE__*/ createComponent<AdmiraltyRadioGroupElement, AdmiraltyRadioGroupEvents>({
    tagName: 'admiralty-radio-group',
    elementClass: AdmiraltyRadioGroupElement,
    react: React,
    events: { onAdmiraltyChange: 'admiraltyChange' } as AdmiraltyRadioGroupEvents,
    defineCustomElement: defineAdmiraltyRadioGroup
});

type AdmiraltyReadMoreEvents = { onAdmiraltyToggled: EventName<CustomEvent<boolean>> };

export const AdmiraltyReadMore: StencilReactComponent<AdmiraltyReadMoreElement, AdmiraltyReadMoreEvents> = /*@__PURE__*/ createComponent<AdmiraltyReadMoreElement, AdmiraltyReadMoreEvents>({
    tagName: 'admiralty-read-more',
    elementClass: AdmiraltyReadMoreElement,
    react: React,
    events: { onAdmiraltyToggled: 'admiraltyToggled' } as AdmiraltyReadMoreEvents,
    defineCustomElement: defineAdmiraltyReadMore
});

type AdmiraltySelectEvents = {
    onAdmiraltyChange: EventName<AdmiraltySelectCustomEvent<SelectChangeEventDetail>>,
    onAdmiraltyBlur: EventName<CustomEvent<void>>
};

export const AdmiraltySelect: StencilReactComponent<AdmiraltySelectElement, AdmiraltySelectEvents> = /*@__PURE__*/ createComponent<AdmiraltySelectElement, AdmiraltySelectEvents>({
    tagName: 'admiralty-select',
    elementClass: AdmiraltySelectElement,
    react: React,
    events: {
        onAdmiraltyChange: 'admiraltyChange',
        onAdmiraltyBlur: 'admiraltyBlur'
    } as AdmiraltySelectEvents,
    defineCustomElement: defineAdmiraltySelect
});

type AdmiraltySideBarEvents = NonNullable<unknown>;

export const AdmiraltySideBar: StencilReactComponent<AdmiraltySideBarElement, AdmiraltySideBarEvents> = /*@__PURE__*/ createComponent<AdmiraltySideBarElement, AdmiraltySideBarEvents>({
    tagName: 'admiralty-side-bar',
    elementClass: AdmiraltySideBarElement,
    react: React,
    events: {} as AdmiraltySideBarEvents,
    defineCustomElement: defineAdmiraltySideBar
});

type AdmiraltySideBarItemEvents = {
    onToggled: EventName<CustomEvent<boolean>>,
    onSideBarItemClick: EventName<CustomEvent<string>>
};

export const AdmiraltySideBarItem: StencilReactComponent<AdmiraltySideBarItemElement, AdmiraltySideBarItemEvents> = /*@__PURE__*/ createComponent<AdmiraltySideBarItemElement, AdmiraltySideBarItemEvents>({
    tagName: 'admiralty-side-bar-item',
    elementClass: AdmiraltySideBarItemElement,
    react: React,
    events: {
        onToggled: 'toggled',
        onSideBarItemClick: 'sideBarItemClick'
    } as AdmiraltySideBarItemEvents,
    defineCustomElement: defineAdmiraltySideBarItem
});

type AdmiraltySideNavEvents = NonNullable<unknown>;

export const AdmiraltySideNav: StencilReactComponent<AdmiraltySideNavElement, AdmiraltySideNavEvents> = /*@__PURE__*/ createComponent<AdmiraltySideNavElement, AdmiraltySideNavEvents>({
    tagName: 'admiralty-side-nav',
    elementClass: AdmiraltySideNavElement,
    react: React,
    events: {} as AdmiraltySideNavEvents,
    defineCustomElement: defineAdmiraltySideNav
});

type AdmiraltySideNavItemEvents = { onSideNavItemSelected: EventName<CustomEvent<string>> };

export const AdmiraltySideNavItem: StencilReactComponent<AdmiraltySideNavItemElement, AdmiraltySideNavItemEvents> = /*@__PURE__*/ createComponent<AdmiraltySideNavItemElement, AdmiraltySideNavItemEvents>({
    tagName: 'admiralty-side-nav-item',
    elementClass: AdmiraltySideNavItemElement,
    react: React,
    events: { onSideNavItemSelected: 'sideNavItemSelected' } as AdmiraltySideNavItemEvents,
    defineCustomElement: defineAdmiraltySideNavItem
});

type AdmiraltySkipLinkEvents = NonNullable<unknown>;

export const AdmiraltySkipLink: StencilReactComponent<AdmiraltySkipLinkElement, AdmiraltySkipLinkEvents> = /*@__PURE__*/ createComponent<AdmiraltySkipLinkElement, AdmiraltySkipLinkEvents>({
    tagName: 'admiralty-skip-link',
    elementClass: AdmiraltySkipLinkElement,
    react: React,
    events: {} as AdmiraltySkipLinkEvents,
    defineCustomElement: defineAdmiraltySkipLink
});

type AdmiraltyTabEvents = NonNullable<unknown>;

export const AdmiraltyTab: StencilReactComponent<AdmiraltyTabElement, AdmiraltyTabEvents> = /*@__PURE__*/ createComponent<AdmiraltyTabElement, AdmiraltyTabEvents>({
    tagName: 'admiralty-tab',
    elementClass: AdmiraltyTabElement,
    react: React,
    events: {} as AdmiraltyTabEvents,
    defineCustomElement: defineAdmiraltyTab
});

type AdmiraltyTabGroupEvents = { onAdmiraltyTabSelected: EventName<CustomEvent<number>> };

export const AdmiraltyTabGroup: StencilReactComponent<AdmiraltyTabGroupElement, AdmiraltyTabGroupEvents> = /*@__PURE__*/ createComponent<AdmiraltyTabGroupElement, AdmiraltyTabGroupEvents>({
    tagName: 'admiralty-tab-group',
    elementClass: AdmiraltyTabGroupElement,
    react: React,
    events: { onAdmiraltyTabSelected: 'admiraltyTabSelected' } as AdmiraltyTabGroupEvents,
    defineCustomElement: defineAdmiraltyTabGroup
});

type AdmiraltyTableEvents = NonNullable<unknown>;

export const AdmiraltyTable: StencilReactComponent<AdmiraltyTableElement, AdmiraltyTableEvents> = /*@__PURE__*/ createComponent<AdmiraltyTableElement, AdmiraltyTableEvents>({
    tagName: 'admiralty-table',
    elementClass: AdmiraltyTableElement,
    react: React,
    events: {} as AdmiraltyTableEvents,
    defineCustomElement: defineAdmiraltyTable
});

type AdmiraltyTableBodyEvents = NonNullable<unknown>;

export const AdmiraltyTableBody: StencilReactComponent<AdmiraltyTableBodyElement, AdmiraltyTableBodyEvents> = /*@__PURE__*/ createComponent<AdmiraltyTableBodyElement, AdmiraltyTableBodyEvents>({
    tagName: 'admiralty-table-body',
    elementClass: AdmiraltyTableBodyElement,
    react: React,
    events: {} as AdmiraltyTableBodyEvents,
    defineCustomElement: defineAdmiraltyTableBody
});

type AdmiraltyTableCellEvents = NonNullable<unknown>;

export const AdmiraltyTableCell: StencilReactComponent<AdmiraltyTableCellElement, AdmiraltyTableCellEvents> = /*@__PURE__*/ createComponent<AdmiraltyTableCellElement, AdmiraltyTableCellEvents>({
    tagName: 'admiralty-table-cell',
    elementClass: AdmiraltyTableCellElement,
    react: React,
    events: {} as AdmiraltyTableCellEvents,
    defineCustomElement: defineAdmiraltyTableCell
});

type AdmiraltyTableHeaderEvents = NonNullable<unknown>;

export const AdmiraltyTableHeader: StencilReactComponent<AdmiraltyTableHeaderElement, AdmiraltyTableHeaderEvents> = /*@__PURE__*/ createComponent<AdmiraltyTableHeaderElement, AdmiraltyTableHeaderEvents>({
    tagName: 'admiralty-table-header',
    elementClass: AdmiraltyTableHeaderElement,
    react: React,
    events: {} as AdmiraltyTableHeaderEvents,
    defineCustomElement: defineAdmiraltyTableHeader
});

type AdmiraltyTableHeaderCellEvents = NonNullable<unknown>;

export const AdmiraltyTableHeaderCell: StencilReactComponent<AdmiraltyTableHeaderCellElement, AdmiraltyTableHeaderCellEvents> = /*@__PURE__*/ createComponent<AdmiraltyTableHeaderCellElement, AdmiraltyTableHeaderCellEvents>({
    tagName: 'admiralty-table-header-cell',
    elementClass: AdmiraltyTableHeaderCellElement,
    react: React,
    events: {} as AdmiraltyTableHeaderCellEvents,
    defineCustomElement: defineAdmiraltyTableHeaderCell
});

type AdmiraltyTableRowEvents = NonNullable<unknown>;

export const AdmiraltyTableRow: StencilReactComponent<AdmiraltyTableRowElement, AdmiraltyTableRowEvents> = /*@__PURE__*/ createComponent<AdmiraltyTableRowElement, AdmiraltyTableRowEvents>({
    tagName: 'admiralty-table-row',
    elementClass: AdmiraltyTableRowElement,
    react: React,
    events: {} as AdmiraltyTableRowEvents,
    defineCustomElement: defineAdmiraltyTableRow
});

type AdmiraltyTextSideBarItemEvents = {
    onToggled: EventName<CustomEvent<boolean>>,
    onTextSideBarItemClick: EventName<CustomEvent<string>>
};

export const AdmiraltyTextSideBarItem: StencilReactComponent<AdmiraltyTextSideBarItemElement, AdmiraltyTextSideBarItemEvents> = /*@__PURE__*/ createComponent<AdmiraltyTextSideBarItemElement, AdmiraltyTextSideBarItemEvents>({
    tagName: 'admiralty-text-side-bar-item',
    elementClass: AdmiraltyTextSideBarItemElement,
    react: React,
    events: {
        onToggled: 'toggled',
        onTextSideBarItemClick: 'textSideBarItemClick'
    } as AdmiraltyTextSideBarItemEvents,
    defineCustomElement: defineAdmiraltyTextSideBarItem
});

type AdmiraltyTextareaEvents = {
    onTextareaBlur: EventName<CustomEvent<any>>,
    onAdmiraltyInput: EventName<AdmiraltyTextareaCustomEvent<TextAreaChangeEventDetail>>
};

export const AdmiraltyTextarea: StencilReactComponent<AdmiraltyTextareaElement, AdmiraltyTextareaEvents> = /*@__PURE__*/ createComponent<AdmiraltyTextareaElement, AdmiraltyTextareaEvents>({
    tagName: 'admiralty-textarea',
    elementClass: AdmiraltyTextareaElement,
    react: React,
    events: {
        onTextareaBlur: 'textareaBlur',
        onAdmiraltyInput: 'admiraltyInput'
    } as AdmiraltyTextareaEvents,
    defineCustomElement: defineAdmiraltyTextarea
});
