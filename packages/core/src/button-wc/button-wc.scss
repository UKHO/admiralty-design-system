// These imports are relative to the project root directory
@use "../../angular/styles/reset";

// Parent pages or components cannot affect styles in the ShadowDOM, but properties
// can still be inherited, so a library like normalise.css is still useful.
@use "node_modules/normalize.css/normalize.css";

@use "../../angular/styles/base/colours"; // as colours;
@use "../../angular/styles/base/responsive"; // as responsive;
@use "../../angular/styles/base/typography"; // as typography;
@use "../../angular/styles/base/icons"; // as icons;

// The standard Font Awesome CSS file contains icons defined using unicode that Lit is
// unable to parse correctly. The modified version escapes all definitions e.g. "\f105"
// becomes "\\f105". See more - https://github.com/lit/lit/issues/348

// @use "../../angular/node_modules/@fortawesome/fontawesome-free/css/fontawesome.css";
@use "../../angular/styles/fontawesome-modified.css";

// Fonts can't be defined in web components. They need to be defined and loaded on
// the parent page. See - https://bugs.chromium.org/p/chromium/issues/detail?id=336876
// @use "../../angular/styles/base/fonts";

/* Button Wrapper */
.button-wrapper {
  display: inline-flex;
  flex-direction: column;

  .error-wrap {
    max-width: 240px;
    display: flex;
    margin-top: 11px;

    > span {
      color: colours.$colour-utility-error;
      margin-left: 10px;
      font-size: 16px;
    }
  }
}

/* Primary Buttons */
button,
input[type="button"] {
  display: inline-block;
  background-color: colours.$colour-button-standard;
  color: colours.$colour-button-text;
  border: 2px solid colours.$colour-button-standard;
  height: 60px;
  padding: 15px 18px;
  font-size: 21px;
  font-weight: typography.$font-weight-medium;
  white-space: nowrap;
  min-width: 200px;
  cursor: pointer;
  @include responsive.not-desktop {
    min-width: unset;
    max-width: 200px;
    width: 100%;
    height: 50px;
    padding: 10px 18px;
  }

  &:hover {
    background-color: colours.$colour-button-hover;
    border: 2px solid colours.$colour-button-hover;
  }

  &:active {
    background-color: colours.$colour-button-selected;
    border: 2px solid colours.$colour-button-border-selected;
    color: colours.$colour-button-icon-selected;

    i {
      color: colours.$colour-button-icon-selected;
    }

    p {
      color: colours.$colour-button-text-selected;
    }
  }

  &:disabled {
    background-color: colours.$colour-button-deselected;
    border: 2px solid colours.$colour-button-deselected;
    cursor: default;
  }

  &.icon {
    min-width: 240px;
    display: flex;
    justify-content: space-between;
    @include responsive.not-desktop {
      min-width: unset;
      max-width: 240px;
      width: 100%;
    }
  }

  i {
    vertical-align: middle;
    display: inline-block;
    font-size: 24px;
    color: colours.$colour-button-icon;
    padding-left: 15px;
  }
}

/* Secondary Buttons */
button.secondary,
input[type="button"].secondary {
  background-color: colours.$colour-button-secondary-standard;
  color: colours.$colour-button-secondary-text;
  border: 2px solid colours.$colour-button-secondary-border-standard;

  &:hover {
    background-color: colours.$colour-button-secondary-hover;
    border: 2px solid colours.$colour-button-secondary-border-hover;
  }

  &:active {
    background-color: colours.$colour-button-secondary-selected;
    border: 2px solid colours.$colour-button-secondary-selected;
    color: colours.$colour-button-secondary-icon-selected;

    i {
      color: colours.$colour-button-secondary-icon-selected;
    }

    p {
      color: colours.$colour-button-secondary-text-selected;
    }
  }

  &:disabled {
    background-color: colours.$colour-button-secondary-deselected;
    border: 2px solid colours.$colour-button-secondary-deselected;
  }

  i {
    color: colours.$colour-button-secondary-icon;
  }
}
