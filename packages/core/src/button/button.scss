// These imports are relative to the project root directory
@use "../../angular/styles/reset";

// Parent pages or components cannot affect styles in the ShadowDOM, but properties
// can still be inherited, so a library like normalise.css is still useful.
@use "node_modules/normalize.css/normalize.css";

// These imports are relative to the project root directory
@use "../../angular/styles/base/colours" as colours;
@use "../../angular/styles/base/responsive";
@use "../../angular/styles/base/typography";
@use "../../angular/styles/base/icons";

// Fonts can't be defined in web components. They need to be defined and loaded on
// the parent page. See - https://bugs.chromium.org/p/chromium/issues/detail?id=336876
// @use "../../angular/styles/base/fonts";

// Font Awesome styles are not loaded here because this example uses slots and the
// parent page is responsibile for styling slotted content.

/* Button Wrapper */
.button-wrapper {
  display: inline-flex;
  flex-direction: column;

  .error-wrap {
    max-width: 240px;
    display: flex;
    margin-top: 11px;

    > span {
      color: colours.$colour-utility-error;
      margin-left: 10px;
      font-size: 16px;
    }
  }
}

/* Primary Buttons */
button,
input[type="button"] {
  display: inline-block;
  background-color: colours.$colour-button-standard;
  color: colours.$colour-button-text;
  border: 2px solid colours.$colour-button-standard;
  height: 60px;
  padding: 15px 18px;
  font-size: 21px;
  font-weight: typography.$font-weight-medium;
  white-space: nowrap;
  min-width: 200px;
  cursor: pointer;
  @include responsive.not-desktop {
    min-width: unset;
    max-width: 200px;
    width: 100%;
    height: 50px;
    padding: 10px 18px;
  }

  // this styles all content passed into the slot
  slot {
    font-size: 21px;
    font-weight: typography.$font-weight-medium;
  }

  &:hover {
    background-color: colours.$colour-button-hover;
    border: 2px solid colours.$colour-button-hover;
  }

  &:active {
    background-color: colours.$colour-button-selected;
    border: 2px solid colours.$colour-button-border-selected;
    color: colours.$colour-button-icon-selected;

    ::slotted(i) {
      color: colours.$colour-button-icon-selected;
    }
  }

  &:disabled {
    background-color: colours.$colour-button-deselected;
    border: 2px solid colours.$colour-button-deselected;
    cursor: default;
  }

  &.icon {
    min-width: 240px;
    display: flex;
    justify-content: space-between;
    @include responsive.not-desktop {
      min-width: unset;
      max-width: 240px;
      width: 100%;
    }
  }

  // Slotted element styles are set on the parent element (e.g. Storybook) but can
  // also be set using the ::slotted() selector.
  ::slotted(i) {
    vertical-align: middle;
    font-size: 24px;
    color: colours.$colour-button-icon;
    padding-left: 15px;
  }

  ::slotted([slot="start"]) {
    vertical-align: middle;
    padding-right: 15px;
  }
  ::slotted([slot="end"]) {
    vertical-align: middle;
    padding-left: 15px;
  }
}

/* Secondary Buttons */
button.secondary,
input[type="button"].secondary {
  background-color: colours.$colour-button-secondary-standard;
  color: colours.$colour-button-secondary-text;
  border: 2px solid colours.$colour-button-secondary-border-standard;

  &:hover {
    background-color: colours.$colour-button-secondary-hover;
    border: 2px solid colours.$colour-button-secondary-border-hover;
  }

  &:active {
    background-color: colours.$colour-button-secondary-selected;
    border: 2px solid colours.$colour-button-secondary-selected;
    color: colours.$colour-button-secondary-icon-selected;

    ::slotted(i) {
      color: colours.$colour-button-secondary-icon-selected;
    }

    ::slotted(p) {
      color: colours.$colour-button-secondary-text-selected;
    }
  }

  &:disabled {
    background-color: colours.$colour-button-secondary-deselected;
    border: 2px solid colours.$colour-button-secondary-deselected;
  }

  // Slotted element styles are set on the parent element (e.g. Storybook) but can
  // also be set using the ::slotted() selector.
  ::slotted(i) {
    color: colours.$colour-button-secondary-icon !important;
  }
}
